apply plugin: 'com.android.application'

android {
    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'jni/jniLibsCurl' // This is not necessary unless you have precompiled libraries in your project.
    }

    defaultConfig {
        ndk {
            moduleName "curl-prebuilt"
        }
    }

    buildTypes
	{
        release
		{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    productFlavors
	{
		arm64-v8a
		{
		    ndk
		    {
			abiFilters "arm64-v8a"
		    }
		}
		armeabi-v7a
		{
		    ndk
		    {
			abiFilters "armeabi-v7a"
		    }
		}
		armeabi
		{
		    ndk
		    {
			abiFilters "armeabi"
		    }
		}
		mips
		{
		    ndk
		    {
			abiFilters "mips"
		    }
		}
		mips64
		{
		    ndk
		    {
			abiFilters "mips64"
		    }
		}
		x86
		{
		    ndk
		    {
			abiFilters "x86"
		    }
		}
		x86_64
		{
		    ndk
		    {
			abiFilters "x86_64"
		    }
		}
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = System.getenv('ANDROID_NDK_HOME')
        commandLine "$ndkDir/ndk-build",
                '-C', file('jni').absolutePath, // Change src/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = System.getenv('ANDROID_NDK_HOME')
        commandLine "$ndkDir/ndk-build",
                '-C', file('jni').absolutePath, // Change src/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }
}
